{"version":3,"file":"wkrk.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { ExtendedResponse } from \"wkrk-extended\";\nimport { ExtendedRequest } from \"wkrk-extended\";\n\ntype Handler =\n  | undefined\n  | ((req: Request, res: ExtendedResponse) => Response)\n  | ((req: Request, res: ExtendedResponse) => Promise<Response>);\n\ntype MethodType = \"get\" | \"post\" | \"put\" | \"delete\";\n\ntype Path = {\n  get?: Handler;\n  post?: Handler;\n  put?: Handler;\n  delete?: Handler;\n  handler?: Handler;\n  default?: {\n    get?: Handler;\n    post?: Handler;\n    handler?: Handler;\n    put?: Handler;\n    delete?: Handler;\n  };\n};\n\ntype RouteType = {\n  [key: string]: Path;\n};\n\nconst getHandler = (req: Request, pathHandler: Path) => {\n  const method = req.method.toLowerCase();\n  if ([\"get\", \"post\", \"put\", \"delete\"].includes(method)) {\n    return (\n      pathHandler[method as MethodType] ||\n      pathHandler.default?.[method as MethodType] ||\n      pathHandler.handler\n    );\n  }\n\n  return pathHandler.handler;\n};\n\nconst pathIsInRoutes = (routes: RouteType, path: string) =>\n  Object.keys(routes).includes(path);\n\nexport const wkrk = (routes: RouteType) => ({\n  async fetch(req: Request) {\n    const requestProxy = new ExtendedRequest(req);\n    const responseProxy = new ExtendedResponse();\n    const pathname = new URL(req.url).pathname;\n    const pathHandler = routes[pathname];\n    if (!pathHandler) {\n      const errorMessage = `Don't know how to handle the ${pathname} path. Check your routes configuration.`;\n      return responseProxy.error(errorMessage);\n    }\n    const handler = getHandler(req, pathHandler);\n    if (!handler) {\n      const errorMessage = `Unknown request method: ${req.method}`;\n      return responseProxy.error(errorMessage);\n    }\n\n    return handler(req, responseProxy);\n  },\n});\n"],"names":["wkrk","routes","async","req","URL","url","pathname","pathHandler","error","handler","method","toLowerCase","_pathHandler$default","includes","default","getHandler","responseProxy"],"mappings":"sEA6BA,MAgBiBA,EAAIC,KACnBC,YAAYC,GACW,MAAoBA,GACzC,QAAsB,QACL,IAAAC,IAAQD,EAAIE,KAAKC,SAC5BC,EAAcN,EAAOK,GAC3B,IAAKC,EAEH,SAAqBC,MADgC,gCAAAF,4CAGvD,MAAMG,EA1BS,EAACN,EAAcI,KAChC,MAAYG,EAAGP,EAAIO,OAAOC,cAC6B,IAAAC,EAAvD,MAAI,CAAC,MAAO,OAAQ,MAAO,UAAUC,SAASH,KAE1CH,EAAYG,KAAZ,OACAH,EAAAA,EAAYO,cADZ,EACAF,EAAsBF,QAKPD,SAgBDM,CAAWZ,EAAKI,GAChC,OAAKE,IAKUN,EAAKa,GAHEA,EAACR,MADA,2BAA2BL,EAAIO"}